/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// Macro to apply momentary-layer-on-hold/to-layer-on-tap

#define MO_TO(layer) &mo_to layer layer

&mmv {
    time-to-max-speed-ms = <250>;
    acceleration-exponent = <1>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // layer switch combo

        combo_ls {
            timeout-ms = <50>;
            key-positions = <38 41>;
            bindings = <&to 1>;
        };
    };
};

/ {
    behaviors {
        // Hold tap for momentary layer on hold but to layer on tap

        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };

        // Hold tap

        bsp_ctrl: tap_backspace_hold_ctrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            retro-tap; // Triggers tap when releasing hold-tap key and no other key pressed
        };

        com_wind: tap_comma_hold_windows {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        shft_entr: tap_enter_hold_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        // Tapdance

        td_cb: tap_dance_backspace_ctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LEFT_CONTROL BACKSPACE>, <&kp ESCAPE>;
        };

        td_sec: tap_dance_shift_enter_capslock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&shft_entr LSHIFT ENTER>, <&kp CAPSLOCK>;
        };

        td_qq: tap_dance_q_esc {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        td_quote: tap_dance_colon_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMICOLON>, <&kp SQT>;
        };

        td_f11: tap_dance_f1_f11 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F1>, <&kp F11>;
        };

        td_f12: tap_dance_f2_f12 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F2>, <&kp F12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_windows {
            bindings = <
&trans  &td_qq  &kp W  &kp E    &kp R  &kp T                    &kp Y                  &kp U  &kp I                 &kp O    &td_quote  &trans
&trans  &kp A   &kp S  &kp D    &kp F  &kp G                    &kp H                  &kp J  &kp K                 &kp L    &kp P      &trans
&trans  &kp Z   &kp X  &kp C    &kp V  &kp B                    &kp N                  &kp M  &com_wind LWIN COMMA  &kp DOT  &kp FSLH   &trans
                       &kp TAB  &mo 2  &bsp_ctrl LCTRL SPACE    &mt RIGHT_SHIFT ENTER  &mo 3  &kp RIGHT_ALT
            >;
        };

        media_mouse {
            bindings = <
&trans  &mkp MB4        &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &mkp MB5          &kp C_PLAY_PAUSE  &kp C_PREV            &kp C_NEXT            &bt BT_SEL 0    &bt BT_SEL 1  &trans
&trans  &mkp MB3        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp C_MUTE        &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &bt BT_SEL 2    &bt BT_SEL 3  &trans
&trans  &msc SCRL_LEFT  &bootloader     &out OUT_TOG    &msc SCRL_RIGHT  &msc SCRL_DOWN    &kp LG(P)         &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &bt BT_CLR_ALL  &bt BT_CLR    &trans
                                        &mkp LCLK       &to 0            &trans            &trans            &to 0                 &trans
            >;
        };

        numbers_nav {
            bindings = <
&trans  &td_f11                &td_f12                &kp F3              &kp F4                   &kp F5     &kp DELETE     &kp HOME                  &kp UP              &kp END                 &kp PAGE_UP             &trans
&trans  &kp F6                 &kp F7                 &kp F8              &kp F9                   &kp F10    &kp BACKSPACE  &kp LEFT                  &kp DOWN            &kp RIGHT               &kp PAGE_DOWN           &trans
&trans  &mt LEFT_GUI NUMBER_1  &mt LEFT_ALT NUMBER_2  &mt LCTRL NUMBER_3  &mt LEFT_SHIFT NUMBER_4  &kp N5     &kp N6         &mt RIGHT_SHIFT NUMBER_7  &mt RCTRL NUMBER_8  &mt RIGHT_ALT NUMBER_9  &mt RIGHT_GUI NUMBER_0  &trans
                                                      &kp INSERT          &to 0                    &trans     &trans         &to 1                     &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp ESC    &kp LBKT      &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp TILDE      &kp CARET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE    &kp RBKT       &kp GRAVE        &trans
&trans  &kp MINUS  &kp ASTERISK  &kp EQUAL       &kp UNDERSCORE        &kp DOLLAR     &kp HASH   &kp RIGHT_SHIFT        &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp LEFT_GUI     &trans
&trans  &kp PLUS   &kp PIPE      &kp AT_SIGN     &kp SLASH             &kp PERCENT    &kp UNDER  &kp NON_US_BACKSLASH   &kp AMPERSAND      &kp QUESTION   &kp EXCLAMATION  &trans
                                 &trans          &trans                &trans         &trans     &trans                 &trans
            >;
        };
    };
};
