/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// Macro to apply momentary-layer-on-hold/to-layer-on-tap

#define MO_TO(layer) &mo_to layer layer

&mmv {
    time-to-max-speed-ms = <250>;
    acceleration-exponent = <1>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // layer switch combo

        combo_ls {
            timeout-ms = <50>;
            key-positions = <37 40>;
            bindings = <&to 3>;
            layers = <0>;
        };
    };
};

/ {
    behaviors {
        // Hold tap for momentary layer on hold but to layer on tap

        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };

        // Hold tap

        bsp_ctrl: tap_backspace_hold_ctrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            retro-tap; // Triggers tap when releasing hold-tap key and no other key pressed
        };

        com_wind: tap_comma_hold_windows {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        shft_entr: tap_enter_hold_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        // Tapdance

        td_cb: tap_dance_backspace_ctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LEFT_CONTROL BACKSPACE>, <&kp ESCAPE>;
        };

        td_sec: tap_dance_shift_enter_capslock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&shft_entr LSHIFT ENTER>, <&kp CAPSLOCK>;
        };

        td_qq: tap_dance_q_esc {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        td_quote: tap_dance_colon_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMICOLON>, <&kp SQT>;
        };

        td_f11: tap_dance_f1_f11 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F1>, <&kp F11>;
        };

        td_f12: tap_dance_f2_f12 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F2>, <&kp F12>;
        };

        mod_tap_layer: mod_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            hold-while-undecided;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_windows {
            bindings = <
&none  &td_qq  &kp W  &kp E             &kp R                   &kp T        &kp Y            &kp U                   &kp I         &kp O    &kp SINGLE_QUOTE  &none
&none  &kp A   &kp S  &kp D             &kp F                   &kp G        &kp H            &kp J                   &kp K         &kp L    &kp P             &none
&none  &kp Z   &kp X  &kp C             &kp V                   &kp B        &kp N            &kp M                   &kp COMMA     &kp DOT  &kp FSLH          &none
                      &mt LEFT_WIN TAB  &mod_tap_layer 1 SPACE  &kp LCTRL    &kp RIGHT_SHIFT  &mod_tap_layer 2 ENTER  &kp LEFT_ALT
            >;
        };

        numbers_nav {
            bindings = <
&none  &kp PLUS   &kp N7  &kp N8  &kp N9  &kp SLASH       &kp DEL               &kp HOME    &kp UP_ARROW  &kp END    &kp PAGE_UP    &none
&none  &mo 3      &kp N4  &kp N5  &kp N6  &kp NUMBER_0    &kp BACKSPACE         &kp LEFT    &kp DOWN      &kp RIGHT  &kp PAGE_DOWN  &none
&none  &kp MINUS  &kp N1  &kp N2  &kp N3  &kp ASTERISK    &kp INSERT            &kp LSHFT   &kp LCTRL     &kp LALT   &kp LGUI       &none
                          &trans  &trans  &trans          &mt LEFT_SHIFT ENTER  &kp KP_DOT  &kp EQUAL
            >;
        };

        symbols {
            bindings = <
&none  &kp BACKSLASH  &kp PIPE     &kp SLASH             &kp LESS_THAN          &kp GREATER_THAN     &none   &none            &none              &none         &none         &none
&none  &kp SEMI       &kp MINUS    &kp EQUAL             &kp LEFT_BRACE         &kp RIGHT_BRACE      &none   &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &none
&none  &kp GRAVE      &kp PERCENT  &kp AMPERSAND         &kp LEFT_BRACKET       &kp RIGHT_BRACKET    &none   &none            &none              &none         &none         &none
                                   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL            &trans  &none            &none
            >;
        };

        media_mouse {
            bindings = <
&none  &mkp MB4        &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &mkp MB5          &kp C_PREV  &kp C_VOLUME_DOWN     &kp C_VOL_UP          &kp C_NEXT  &kp C_PLAY_PAUSE  &none
&none  &mkp MB3        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp C_MUTE  &kp LSHFT             &kp LCTRL             &kp LALT    &kp LGUI          &none
&none  &msc SCRL_LEFT  &none           &none           &msc SCRL_RIGHT  &msc SCRL_DOWN    &kp LG(P)   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none       &to 5             &none
                                       &mkp RCLK       &to 0            &mkp LCLK         &trans      &to 0                 &mo 6
            >;
        };

        func_keys {
            bindings = <
&none  &none  &kp F7  &kp F8  &kp F9  &kp F10    &none   &none      &none      &none     &none     &none
&none  &none  &kp F4  &kp F5  &kp F6  &kp F11    &none   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none   &none      &none      &none     &none     &none
                      &none   &none   &none      &trans  &none      &none
            >;
        };

        gaming {
            bindings = <
&none  &kp ESC    &kp Q  &kp W      &kp E      &kp R           &none     &none  &none  &none  &none  &none
&none  &kp TAB    &kp A  &kp S      &kp D      &kp F           &none     &none  &none  &none  &none  &none
&none  &kp LSHFT  &kp Z  &kp X      &kp C      &kp V           &none     &none  &none  &none  &none  &none
                         &kp LCTRL  &kp SPACE  &kp LEFT_ALT    &kp LGUI  &to 0  &none
            >;
        };

        keyb_and_bt {
            bindings = <
&none  &none       &none           &none  &none        &none           &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none
&none  &none       &none           &none  &none        &out OUT_TOG    &none          &none          &none          &none          &none          &none
&none  &bt BT_CLR  &bt BT_CLR_ALL  &none  &bootloader  &sys_reset      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
                                   &none  &none        &none           &none          &none          &none
            >;
        };
    };
};
